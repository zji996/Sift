name: "Release"

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: 'v1.0.0'

env:
  GO_VERSION: '1.23'
  NODE_VERSION: '18'

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: 'linux/amd64'
            os: 'ubuntu-latest'
            build-name: 'linux-amd64'
            build-path: 'build/bin/Sift'
            asset-name: 'Sift-linux-amd64'
          - name: 'windows/amd64'
            os: 'windows-latest'
            build-name: 'windows-amd64'
            build-path: 'build/bin/Sift.exe'
            asset-name: 'Sift-windows-amd64.exe'
          - name: 'darwin/amd64'
            os: 'macos-latest'
            build-name: 'darwin-amd64'
            build-path: 'build/bin/Sift.app'
            asset-name: 'Sift-darwin-amd64.app'
          - name: 'darwin/arm64'
            os: 'macos-latest'
            build-name: 'darwin-arm64'
            build-path: 'build/bin/Sift.app'
            asset-name: 'Sift-darwin-arm64.app'

    runs-on: ${{ matrix.platform.os }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm install

      - name: Install Wails CLI
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      # Linux 特定依赖
      - name: Install Linux dependencies
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libgtk-3-dev libwebkit2gtk-4.0-dev

      # macOS 特定设置
      - name: Import Code-Signing Certificates
        if: matrix.platform.os == 'macos-latest'
        uses: Apple-Actions/import-codesign-certs@v3
        with:
          # 如果要代码签名，需要设置这些密钥
          p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
          p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
        continue-on-error: true

      # Windows 特定设置
      - name: Setup Windows build environment
        if: matrix.platform.os == 'windows-latest'
        run: |
          # 确保使用正确的工具链
          echo "CGO_ENABLED=1" >> $env:GITHUB_ENV

      - name: Build Wails app
        run: |
          wails build --platform ${{ matrix.platform.name }} --clean

      # Linux 打包
      - name: Package Linux binary
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          tar -czf ${{ matrix.platform.asset-name }}.tar.gz -C build/bin Sift

      # Windows 打包（已经是 .exe）
      - name: Prepare Windows binary
        if: matrix.platform.os == 'windows-latest'
        run: |
          copy "build/bin/Sift.exe" "${{ matrix.platform.asset-name }}"

      # macOS 打包
      - name: Package macOS app
        if: matrix.platform.os == 'macos-latest'
        run: |
          # 创建 DMG 或直接压缩 .app
          if [[ "${{ matrix.platform.name }}" == "darwin/amd64" ]]; then
            ditto -c -k --sequesterRsrc --keepParent "build/bin/Sift.app" "${{ matrix.platform.asset-name }}.zip"
          else
            ditto -c -k --sequesterRsrc --keepParent "build/bin/Sift.app" "${{ matrix.platform.asset-name }}.zip"
          fi

      # 上传构建产物
      - name: Upload Linux artifacts
        if: matrix.platform.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.asset-name }}
          path: ${{ matrix.platform.asset-name }}.tar.gz

      - name: Upload Windows artifacts
        if: matrix.platform.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.asset-name }}
          path: ${{ matrix.platform.asset-name }}

      - name: Upload macOS artifacts
        if: matrix.platform.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.asset-name }}
          path: ${{ matrix.platform.asset-name }}.zip

  create-release:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List artifacts
        run: ls -la artifacts/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name || github.event.inputs.version }}
          release_name: Release ${{ github.ref_name || github.event.inputs.version }}
          draft: false
          prerelease: false
          body: |
            ## Sift ${{ github.ref_name || github.event.inputs.version }}
            
            ### 下载说明
            - **Windows**: 下载 `Sift-windows-amd64.exe` 
            - **macOS (Intel)**: 下载 `Sift-darwin-amd64.app.zip`
            - **macOS (Apple Silicon)**: 下载 `Sift-darwin-arm64.app.zip`
            - **Linux**: 下载 `Sift-linux-amd64.tar.gz`
            
            ### 更新内容
            - [列出这个版本的主要更新内容]
            
            ### 安装说明
            1. 下载对应平台的文件
            2. 解压缩（如需要）
            3. 运行应用程序
            
            > 注意：macOS 用户首次运行可能需要在系统偏好设置中允许运行来自未知开发者的应用程序。

      # 上传所有平台的构建产物到 Release
      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/Sift-linux-amd64/Sift-linux-amd64.tar.gz
          asset_name: Sift-linux-amd64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/Sift-windows-amd64.exe/Sift-windows-amd64.exe
          asset_name: Sift-windows-amd64.exe
          asset_content_type: application/octet-stream

      - name: Upload macOS Intel Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/Sift-darwin-amd64.app/Sift-darwin-amd64.app.zip
          asset_name: Sift-darwin-amd64.app.zip
          asset_content_type: application/zip

      - name: Upload macOS ARM Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/Sift-darwin-arm64.app/Sift-darwin-arm64.app.zip
          asset_name: Sift-darwin-arm64.app.zip
          asset_content_type: application/zip 